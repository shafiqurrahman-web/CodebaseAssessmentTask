@model CodebaseAssessmentTask.Models.RegistrationConfirmPinViewModel
@{
    ViewData["Title"] = "Confirm PIN";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@if (ViewData.ModelState["ConfirmPin"] != null && ViewData.ModelState["ConfirmPin"].Errors.Count > 0)
{
    <div style="background: #fff3f2; border-radius: 16px; padding: 1rem 1.5rem; margin-bottom: 1.5rem; display: flex; align-items: flex-start; gap: 1rem; box-shadow: 0 2px 8px rgba(0,0,0,0.04);">
        <span style="color: #ff4d4f; font-size: 1.5rem; margin-top: 2px;">
            <svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' fill='none' viewBox='0 0 24 24'><circle cx='12' cy='12' r='10' fill='#fff3f2'/><path fill='#ff4d4f' d='M12 7a1 1 0 0 1 1 1v4a1 1 0 1 1-2 0V8a1 1 0 0 1 1-1Zm0 8a1.25 1.25 0 1 0 0-2.5A1.25 1.25 0 0 0 12 15Z'/></svg>
        </span>
        <div style="flex: 1;">
            <div style="font-weight: 600; color: #ff4d4f;">Unmatched PIN</div>
            <div style="color: #b23c3c; font-size: 1rem;">Please enter your PIN again</div>
        </div>
        <button type="button" onclick="this.parentElement.style.display='none'" style="background: none; border: none; font-size: 1.2rem; color: #b23c3c; cursor: pointer;">&times;</button>
    </div>
}

<div class="container position-relative" style="max-width: 430px; min-height: 100vh; padding-bottom: 120px;">
    <div class="pt-4 ps-2 d-flex align-items-center">
        <a href="javascript:history.back()" style="text-decoration: none; font-size: 1.5rem; color: #222;">&#8592;</a>
    </div>
    <div class="mt-4 mb-2 px-2 text-center">
        <div style="font-size: 0.85rem; font-weight: 600; color: #888; letter-spacing: 1px;">STEP 4 OF 4</div>
        <div class="progress mb-3" style="height: 4px; background: #e5e5e5; border-radius: 2px;">
            <div class="progress-bar" role="progressbar" style="width: 100%; background: #1ec98b; border-radius: 2px;" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
        </div>
        <h4 style="font-weight: 500; color: #444; margin-top: 2.5rem; margin-bottom: 1rem;">Please confirm your 6-digit PIN</h4>
        <div style="font-size: 0.9rem; color: #666; margin-bottom: 2rem;">
            You can login using the PIN and authenticate any account activity.
        </div>
        
        <form asp-action="ConfirmPin" method="post" id="confirmPinForm" autocomplete="off">
             <div asp-validation-summary="ModelOnly" class="text-danger"></div>
           
            <input type="hidden" name="ConfirmPin" id="combinedPin" />

            <div class="d-flex justify-content-center gap-2 mb-4 mt-4">
                <input type="password" maxlength="1" pattern="[0-9]*" inputmode="numeric" class="pin-input" name="Pin1" />
                <input type="password" maxlength="1" pattern="[0-9]*" inputmode="numeric" class="pin-input" name="Pin2" />
                <input type="password" maxlength="1" pattern="[0-9]*" inputmode="numeric" class="pin-input" name="Pin3" />
                <input type="password" maxlength="1" pattern="[0-9]*" inputmode="numeric" class="pin-input" name="Pin4" />
                <input type="password" maxlength="1" pattern="[0-9]*" inputmode="numeric" class="pin-input" name="Pin5" />
                <input type="password" maxlength="1" pattern="[0-9]*" inputmode="numeric" class="pin-input" name="Pin6" />
            </div>
            
            <div class="mb-4">
                <button type="submit" class="btn next-btn w-100" id="nextBtn" disabled>NEXT</button>
            </div>
        </form>
    </div>
</div>

<script>
    const pinInputs = document.querySelectorAll('.pin-input');
    const nextBtn = document.getElementById('nextBtn');
    const combinedPinInput = document.getElementById('combinedPin');
     // const initialPinHidden = document.getElementById('initialPinHidden'); // Not strictly needed based on current controller logic

    function checkInputs() {
        let allFilled = true;
        let currentPin = '';
        pinInputs.forEach(input => {
            if (!input.value.trim()) {
                allFilled = false;
            }
            currentPin += input.value;
        });
        combinedPinInput.value = currentPin; // Update the hidden input for ConfirmPin
        
        nextBtn.disabled = !allFilled || currentPin.length !== 6;

        if (!nextBtn.disabled) {
            nextBtn.style.background = '#b14fc2';
            nextBtn.style.color = '#fff';
            nextBtn.style.cursor = 'pointer';
        } else {
            nextBtn.style.background = '#e5e1e7';
            nextBtn.style.color = '#bdbdbd';
            nextBtn.style.cursor = 'not-allowed';
        }
    }

    pinInputs.forEach((input, idx) => {
        input.addEventListener('input', function(e) {
            if (this.value.length === 1 && idx < pinInputs.length - 1) {
                pinInputs[idx + 1].focus();
            } else if (this.value.length > 1) {
                 this.value = this.value.slice(0, 1); // Prevent more than one character
            }
            checkInputs();
        });
        input.addEventListener('keydown', function(e) {
            if (e.key === 'Backspace' && !this.value && idx > 0) {
                pinInputs[idx - 1].focus();
            }
        });
         // Handle paste
        input.addEventListener('paste', function(e) {
            const paste = (e.clipboardData || window.clipboardData).getData('text');
            if (/^\d{6}$/.test(paste)) {
                for (let i = 0; i < 6; i++) {
                    if (pinInputs[i]) {
                         pinInputs[i].value = paste[i];
                    }
                }
                 if (pinInputs[5]) {
                     pinInputs[5].focus();
                 }
                checkInputs();
                e.preventDefault();
            }
        });
    });

    // Initial check on page load
    checkInputs();

     // Combine inputs on form submit
    document.getElementById('confirmPinForm').addEventListener('submit', function(e) {
        let finalPin = '';
        pinInputs.forEach(input => {
            finalPin += input.value;
        });
        combinedPinInput.value = finalPin;
    });

</script>

<style>
    .pin-input {
        width: 40px;
        height: 40px;
        text-align: center;
        font-size: 1.5rem;
        border: none;
        border-bottom: 2px solid #e5e5e5;
        background: transparent;
        outline: none;
        margin: 0 2px;
        border-radius: 0;
        color: #222;
    }
    .pin-input:focus {
        border-bottom: 2px solid #b14fc2;
    }
    .next-btn {
        background: #e5e1e7;
        color: #bdbdbd;
        font-weight: 600;
        font-size: 1.1rem;
        border-radius: 12px;
        padding: 16px 0;
        border: none;
        letter-spacing: 1px;
        transition: background 0.2s, color 0.2s;
    }
    .next-btn:active:not(:disabled), .next-btn:focus:not(:disabled) {
        background: #a03eb0;
        color: #fff;
    }
    @@media (max-width: 430px) {
        .container {
            max-width: 100vw !important;
            padding-left: 0;
            padding-right: 0;
        }
        .next-btn {
            max-width: 100vw;
        }
    }
</style>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
} 